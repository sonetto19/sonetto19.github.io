<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决proxmoxVE无法安装到eMMC上的问题</title>
      <link href="/2023/06/16/%E8%A7%A3%E5%86%B3ProxmoxVE%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E5%88%B0eMMC%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/16/%E8%A7%A3%E5%86%B3ProxmoxVE%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E5%88%B0eMMC%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="9块9的快乐没了"><a href="#9块9的快乐没了" class="headerlink" title="9块9的快乐没了"></a>9块9的快乐没了</h1><p>玩客云坏了，之前刷了OpenWRT做旁路由，虽然带宽最高只能跑到300M，但勉强也让女儿实现了迪士尼自由，但是最近突然开始莫名的重启，不定时的，几分钟一次。其实之前就有征兆了，ssh的连接很慢，网页访问速度奇慢，一开始以为是固件问题，刷了几次，但这次是彻底没救了，所以转向了x86架构。</p><h1 id="硬盘哪去了？"><a href="#硬盘哪去了？" class="headerlink" title="硬盘哪去了？"></a>硬盘哪去了？</h1><p>4G内存16G存储，J4105的CPU，准备装PVE，报错，提示<code>unable to get dvice for partition 1 on device /dev/mmcblk0</code>，开始认为是硬盘的问题，遂想格式化一下硬盘再装，PE进入发现找不到硬盘，bing一下，说要进bios把ACHI格式改成IDE模式才行，但是没得改，换了PE也不行，最后用cmd命令，格式化了硬盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line"><span class="keyword">select</span> disk 1</span><br><span class="line">clean</span><br></pre></td></tr></table></figure><p>但是安装PVE时仍然报一样的错误，最后想到这台瘦客户机的存储，是否和玩客云一样，是板载的eMMC，最后还真让我找到了类似的文章，并按照文章内容，成功写入PVE，记录如下：</p><p>⚠️<strong>警告：PVE 并未针对这种设备优化，eMMC 也并非针对这种使用设计。PVE 每天要往存储设备中写入一定量的日志信息，USE AT YOUR OWN RISK！</strong></p><p>1.启动 PVE 安装程序，进入安装初始界面</p><p>2.启动后点击 <code>Install Proxmox VE (Debug mode)</code></p><p>3.在第一次提示你可以输入命令的时候输入 <code>Ctrl-D</code> ，继续安装过程</p><p>4.在第二次提示你可以输入命令的时候输入 <code>vi /usr/bin/proxinstall</code> 编辑文件（或者使用其他文字编辑器如 nano）</p><p>5.输入 <code>/unable to get device</code> 定位到对应位置</p><p>6.你可以看到类似下方的内容：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($dev =~ m|^<span class="regexp">/dev/</span>[^<span class="regexp">/]+/</span>hd[a-z]$|) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;dev&#125;</span>$partnum&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($dev =~ m|^<span class="regexp">/dev/n</span>vme\\d+n\\d+$|) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;dev&#125;</span>p$partnum&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> <span class="string">&quot;unable to get device for partitionpartnum on devicedev\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>将其修改（添加）为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($dev =~ m|^<span class="regexp">/dev/</span>[^<span class="regexp">/]+/</span>hd[a-z]$|) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;dev&#125;</span>$partnum&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($dev =~ m|^<span class="regexp">/dev/n</span>vme\\d+n\\d+$|) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;dev&#125;</span>p$partnum&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elsif</span> ($dev =~ m|^<span class="regexp">/dev/mm</span>cblk\\d+$|) &#123;<span class="regexp">//</span>这里不一样</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">$&#123;dev&#125;</span>p$partnum&quot;</span>;<span class="regexp">//</span>这里不一样</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> <span class="string">&quot;unable to get device for partitionpartnum on devicedev\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>7.然后输入 <code>Ctrl-D</code> ，继续安装过程</p><p>8.此时应该进入了正常的安装程序，硬盘选择的时候选择 <code>/dev/mmcblk0</code> （没有 <code>bootX</code> 后缀）（建议关闭 swap）</p><p>9.最后安装完成后输入 <code>Ctrl-D</code> ，重启系统</p><p>另外，也可以使用官方提供的方式，先安装 Debian 再安装 PVE，只不过那样安装很慢，而且网卡和分区并没有提前配置好，需要自己手动配置。具体参见：<a href="https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Buster">Install Proxmox VE on Debian Buster - Proxmox VE </a></p><p>网上还有使用 bin 等类似 ghost 的方法直接 dd 进 eMMC，或者先安装到另外一个硬盘上再使用 DiskGenius 乾坤大挪移到 eMMC 等方法在此不再做过多叙述，可以参见下方文章：</p><ul><li><a href="https://www.wnark.com/archives/116.html">N3450（锐角云）安装Proxmox VE（PVE）教程 - 方舟基地 </a></li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><code>Install Proxmox VE (Debug mode)</code> 提供了在安装过程中各个阶段执行脚本的能力。</p><p>修改的文件是为安装程序提供 MMC 设备检测支持。</p><p>没有直接修改 ISO 主要是由于，一是该文件在 pve-installer.squashfs 中，由安装程序在运行的时候加载，修改需要解包后重新打包，二是这样更透明，避免使用一个来源不是很明确的二进制文件。</p><p>安装过程中，配置信息那里使用了 Linux 的图形界面，类似于 Ubuntu 的使用，按下 <code>Ctrl+Alt+F1/F2</code> 为相应的日志信息，按下 <code>Ctrl+Alt+F3</code> 可以切换出命令行，按下 <code>Ctrl+Alt+F4</code> 可以切换回图形界面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软路由 </tag>
            
            <tag> PVE </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境下Cygwin的配置</title>
      <link href="/2023/06/02/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BCygwin%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/06/02/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BCygwin%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="我太懒了"><a href="#我太懒了" class="headerlink" title="我太懒了"></a>我太懒了</h1><p>最近换了台win11，装了Clion以后，实在不想配置wsl，但是MinGW的中文乱码问题又实在是恼火，之前试过Cygwin，感觉不太好用，但是这次感觉不错，所以记录下安装过程。</p><p>wsl我的感觉是启动慢，配置繁琐，但是他们始终是工具，顺手简单不折腾才是根本，Cygwin也不复杂，也不用装很多东西，目前为止很满意。</p><h1 id="访问Cygwin官网，下载并安装"><a href="#访问Cygwin官网，下载并安装" class="headerlink" title="访问Cygwin官网，下载并安装"></a>访问Cygwin官网，下载并安装</h1><img src="https://s2.loli.net/2023/06/02/IRQXAp4k1ryUeiL.png" alt="下载.png"  /><blockquote><ol><li>选择从互联网安装（下载的文件将保留以备将来重复使用）</li><li>全部默认下一步</li><li>使用系统代理设置，选择国内源快一点</li><li>在选择包界面，安装以下包，在查看选择<code>完整</code>，处输入关键词，选择需要安装的软件包，选择版本号后，即可搜索下一个包，最后点击下一步时可以批量安装</li></ol><p><img src="https://s2.loli.net/2023/06/02/qr64dRNLB9lTPaM.png" alt="软件包.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc-core</span><br><span class="line">gcc-g++</span><br><span class="line">gdb</span><br><span class="line">make</span><br><span class="line">cmake</span><br></pre></td></tr></table></figure></blockquote><h1 id="安装完成后，添加cygwin的环境变量"><a href="#安装完成后，添加cygwin的环境变量" class="headerlink" title="安装完成后，添加cygwin的环境变量"></a>安装完成后，添加cygwin的环境变量</h1><p><img src="https://s2.loli.net/2023/06/02/qeLfhkdYmizcV31.png" alt="环境变量.png"></p><h1 id="CLion中配置Cygwin"><a href="#CLion中配置Cygwin" class="headerlink" title="CLion中配置Cygwin"></a>CLion中配置Cygwin</h1><p>clion中添加cygwin环境，这里注意</p><blockquote><p>CMake使用Cygwin版本的CMake，这里涉及到中文路径问题，全部设置完，设置Cygwin为default，完成即可</p><p><img src="https://s2.loli.net/2023/06/02/bgTXFuvzqOwmRlP.png" alt="cmake.png"></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Clion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clion使用WSL编写C语言问题汇总</title>
      <link href="/2021/11/12/Clion%E4%BD%BF%E7%94%A8WSL%E7%BC%96%E5%86%99C%E8%AF%AD%E8%A8%80%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2021/11/12/Clion%E4%BD%BF%E7%94%A8WSL%E7%BC%96%E5%86%99C%E8%AF%AD%E8%A8%80%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Clion使用WSL编写C语言链接数学库错误"><a href="#Clion使用WSL编写C语言链接数学库错误" class="headerlink" title="Clion使用WSL编写C语言链接数学库错误"></a>Clion使用WSL编写C语言链接数学库错误</h2><p><strong>问题出现场景：</strong></p><p>在Clion中使用sqrt函数引用&lt;math.h&gt;头文件时，提示<code>undefined reference to &#39;sqrt&#39;</code>, 因为WSL使用gcc编译，Linux下的数学库是不自动链接的,也就是说需要你去链接。不过有些系统还是自动链接的。但是WSL的Ubuntu不行，如果发现你加了某个系统函数的头文件还是出现没定义的错误的话，Linux环境下是可以试着自己在编译时加上链接该库的指令,链接数学库是用的 -lm 也就是 gcc -o example.out example.c -lm，但是在Clion中该如何解决呢？</p><p><strong>解决办法：</strong></p><blockquote><p>使用CMake链接到C数学库</p></blockquote><p>数学库通常作为一个单独的库（方便地命名为<code>m</code> ）链接，您明确需要与之链接。</p><p>您告诉 CLion（通过其<code>CMakeLists.txt</code>文件）使用<a href="https://stackoom.com/link/aHR0cHM6Ly9jbWFrZS5vcmcvY21ha2UvaGVscC9sYXRlc3QvY29tbWFuZC90YXJnZXRfbGlua19saWJyYXJpZXMuaHRtbA=="><code>target_link_libraries</code></a>命令链接库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries(PROJECTNAME m)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/12/hmuST9WGx2i8Je7.png" alt="CMale.png"></p><h2 id="Clion调用C静态库"><a href="#Clion调用C静态库" class="headerlink" title="Clion调用C静态库"></a>Clion调用C静态库</h2><blockquote><p>例子中创建了lib文件夹存放静态库文件，header文件夹存放头文件</p></blockquote><p>进入到CMakeList.txt文件进行修改，例子如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.15)</span><br><span class="line">project(call_static_test C)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_STANDARD 11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定lib目录</span></span><br><span class="line">link_directories(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 指定头文件搜索路径</span></span><br><span class="line">include_directories(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include)</span><br><span class="line"></span><br><span class="line">add_executable(<span class="variable">$&#123;PROJECT_NAME&#125;</span>  main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将库链接到项目中</span></span><br><span class="line">target_link_libraries(<span class="variable">$&#123;PROJECT_NAME&#125;</span> libstatic_generate.a)</span><br></pre></td></tr></table></figure><p>图例如下</p><p><img src="https://i.loli.net/2021/11/23/5At1suSfkQOxCeZ.png" alt="静态库.png"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Clion </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境Clion中文乱码最完美方案</title>
      <link href="/2021/11/12/Windows%E7%8E%AF%E5%A2%83Clion%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%9C%80%E5%AE%8C%E7%BE%8E%E6%96%B9%E6%A1%88/"/>
      <url>/2021/11/12/Windows%E7%8E%AF%E5%A2%83Clion%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%9C%80%E5%AE%8C%E7%BE%8E%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="我是个喜欢用-JetBrains的辣鸡"><a href="#我是个喜欢用-JetBrains的辣鸡" class="headerlink" title="我是个喜欢用 JetBrains的辣鸡"></a>我是个喜欢用 <strong>JetBrains</strong>的辣鸡</h1><p>我是个喜欢用 <strong>JetBrains</strong>的辣鸡，<strong>Visual Studio</strong>虽然也很好，但是总感觉界面很乱，不能集中精神去敲Bug，Clion的界面看多了也丑，但的确能让我集中精神，真是玄学。</p><p>Clion用着虽然舒服，但是中文一直乱码，真的很糟心，百度了一下，居然让我用cmd运行编译出来的exe，这特么不是脱裤子放屁吗，其他几种自称完美解决方案的，我也是无力吐槽，这纯属于脱了裤子放完屁还不提上的。</p><h1 id="几种不靠谱的方法"><a href="#几种不靠谱的方法" class="headerlink" title="几种不靠谱的方法"></a>几种不靠谱的方法</h1><h2 id="1-最傻X的方法"><a href="#1-最傻X的方法" class="headerlink" title="1. 最傻X的方法"></a>1. 最傻X的方法</h2><blockquote><p>编译器：MinGW64</p></blockquote><p>百度看病，坟墓已定。一百度80%都是这个方法，复制粘贴，错别字都一样的方法:</p><p>参考链接：<a href="https://blog.csdn.net/dengya_dengya/article/details/108361100">用Clion运行C++代码时输出中文乱码解决方法</a></p><p>我一开始就是用这个，没什么意义，但是我想问下，改文件编码，您的代码是绑定机器的吗，别人只配看乱码是吗？</p><ul><li>优点：可以解决中文乱码</li><li>缺点：纯正的脱裤子放屁</li></ul><h2 id="2-另辟蹊径法"><a href="#2-另辟蹊径法" class="headerlink" title="2. 另辟蹊径法"></a>2. 另辟蹊径法</h2><blockquote><p> 编译器：Cygwin</p></blockquote><p>没试，cygwin听说在windows下体验很差，没考虑过，感兴趣的可以自己试下。</p><h2 id="3-直接进坟墓的方法，导致Clion无法正常使用"><a href="#3-直接进坟墓的方法，导致Clion无法正常使用" class="headerlink" title="3. 直接进坟墓的方法，导致Clion无法正常使用"></a>3. 直接进坟墓的方法，导致Clion无法正常使用</h2><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/106747225">Clion 中 的乱码问题正确解决方案（来自官方技术支持）</a></p><p>按下Ctrl+Shift+Alt+&#x2F;，取消默认选中的run.processes.with.pty</p><p>最害人的方法，你说中国人不骗中国人我就信你。</p><ul><li>优点：可以解决乱码问题</li><li>缺点：我有些程序直接卡死，无法编译运行</li></ul><h2 id="4-还可以的方法"><a href="#4-还可以的方法" class="headerlink" title="4. 还可以的方法"></a>4. 还可以的方法</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_43851212/article/details/90485420">Windows下CLion中文乱码最有效的解决方式</a></p><p>最有效的方法：<br><strong>C++</strong></p><p>在cmakelist.txt添加<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -Wall -fexec-charset=GBK&quot;)</code><br><strong>C语言</strong></p><p>在cmakelist.txt添加<code>CMAKE_C_FLAGS &quot;$&#123;CMAKE_C_FLAGS&#125; -Wall -fexec-charset=GBK&quot;</code><br>但是该方法使得 relase 模式正常了，但是 debug 反而乱码了</p><h2 id="5-直接使用Debug"><a href="#5-直接使用Debug" class="headerlink" title="5. 直接使用Debug"></a>5. 直接使用Debug</h2><p>Debug模式不乱码，我没事Debug干啥，我就想写Bug不行吗？</p><h1 id="最完美的方案-Windows-10-配置Clion-WSL2环境"><a href="#最完美的方案-Windows-10-配置Clion-WSL2环境" class="headerlink" title="最完美的方案 Windows 10 配置Clion+WSL2环境"></a>最完美的方案 Windows 10 配置Clion+WSL2环境</h1><p>移植版本肯定会有各种问题，但是 wsl 下的 gcc 提供的是原生支持，不会有任何问题。</p><h2 id="【第一步】为-Linux-安装-Windows-子系统"><a href="#【第一步】为-Linux-安装-Windows-子系统" class="headerlink" title="【第一步】为 Linux 安装 Windows 子系统"></a>【第一步】为 Linux 安装 Windows 子系统</h2><p>参考链接：<a href="https://docs.microsoft.com/en-us/windows/wsl/install">Install WSL</a></p><h3 id="1-启用“-Linux的Windows子系统”可选功能"><a href="#1-启用“-Linux的Windows子系统”可选功能" class="headerlink" title="1. 启用“ Linux的Windows子系统”可选功能"></a>1. 启用“ Linux的Windows子系统”可选功能</h3><p>以管理员身份打开PowerShell并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><h3 id="2-保证Windows-10版本"><a href="#2-保证Windows-10版本" class="headerlink" title="2. 保证Windows 10版本"></a>2. 保证Windows 10版本</h3><ul><li>对于x64系统：<strong>版本1903</strong>或更高版本，以及<strong>内部版本18362</strong>或更高版本。</li><li>对于ARM64系统：<strong>2004</strong>或更高版本，<strong>内部版本19041</strong>或更高。</li><li>低于18362的内部版本不支持WSL2。</li></ul><h3 id="3-在安装WSL-2之前，必须启用虚拟机平台可选功能"><a href="#3-在安装WSL-2之前，必须启用虚拟机平台可选功能" class="headerlink" title="3. 在安装WSL 2之前，必须启用虚拟机平台可选功能"></a>3. 在安装WSL 2之前，必须启用虚拟机平台可选功能</h3><p>以管理员身份打开PowerShell并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p><strong>重新启动</strong>计算机以完成WSL安装并更新到WSL 2。</p><h3 id="4-下载Linux内核更新程序包："><a href="#4-下载Linux内核更新程序包：" class="headerlink" title="4. 下载Linux内核更新程序包："></a>4. 下载Linux内核更新程序包：</h3><p>下载链接：<a href="https://link.zhihu.com/?target=https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">Linux内核更新程序包</a></p><p>（如果使用的是ARM64计算机，请改为下载<a href="https://link.zhihu.com/?target=https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi">ARM64软件包</a>。如果不确定所用的机器类型，请打开“命令提示符”或“ PowerShell”并输入：<code>systeminfo | find &quot;System Type&quot;</code>）</p><p>运行在下载的更新程序包。（双击运行-系统将提示您提升权限，选择“是”以批准此安装）</p><h3 id="5-将WSL-2设置为默认版本"><a href="#5-将WSL-2设置为默认版本" class="headerlink" title="5. 将WSL 2设置为默认版本"></a>5. 将WSL 2设置为默认版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h3 id="6-安装wsl发行版的Ubuntu（或者其他发行版）"><a href="#6-安装wsl发行版的Ubuntu（或者其他发行版）" class="headerlink" title="6. 安装wsl发行版的Ubuntu（或者其他发行版）"></a>6. 安装wsl发行版的Ubuntu（或者其他发行版）</h3><p>Microsoft Store: <a href="https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6?activetab=pivot:overviewtab">Unbutu</a></p><h3 id="7-打开、等待安装，并为新的Linux发行版创建一个用户帐户和密码"><a href="#7-打开、等待安装，并为新的Linux发行版创建一个用户帐户和密码" class="headerlink" title="7. 打开、等待安装，并为新的Linux发行版创建一个用户帐户和密码"></a>7. 打开、等待安装，并为新的Linux发行版创建一个用户帐户和密码</h3><ul><li>首次创建可能需要等待一两分钟</li><li>如果在创建用户，输入内容的时候出现“<strong>参考的对象类型不支持尝试的操作</strong>”的提示，可以用管理员身份打开PowerShell或者CMD输入下面的命名，并重启Windows 10（会丢失非root的用户，可以卸载Ubuntu再重新安装）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><h3 id="8-最后"><a href="#8-最后" class="headerlink" title="8. 最后"></a>8. 最后</h3><ul><li>检查分配给已安装的每个Linux发行版的WSL版本：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><ul><li>如果要将WSL 2设置为默认体系结构，则可以使用以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><ul><li>建议选择Ubuntu（不带数字）并设置WSL版本为2（自带的apt源速度还可以）</li></ul><h2 id="【第二步】配置WSL（Ubuntu）"><a href="#【第二步】配置WSL（Ubuntu）" class="headerlink" title="【第二步】配置WSL（Ubuntu）"></a>【第二步】配置WSL（Ubuntu）</h2><p>参考链接：<a href="https://www.jetbrains.com/help/clion/how-to-use-wsl-development-environment-in-product.html">WSL - Help | Clion</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><ul><li>安装cmake，gcc或&#x2F;和clang（以及可选的*build-essentials*软件包）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake gcc clang gdb build-essential</span><br></pre></td></tr></table></figure><ul><li>配置并运行ssh-server</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/JetBrains/clion-wsl/master/ubuntu_setup_env.sh &amp;&amp; bash ubuntu_setup_env.sh</span><br></pre></td></tr></table></figure><p>这个链接适用于不在国内环境的，国内需要自己手动配置脚本。</p><p>GayHub链接：<a href="https://github.com/JetBrains/clion-wsl">clion-wsl</a></p><ol><li>新建“ubuntu_setup_env.sh”内容如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">SSHD_LISTEN_ADDRESS=127.0.0.1</span><br><span class="line"></span><br><span class="line">SSHD_PORT=2222</span><br><span class="line">SSHD_FILE=/etc/ssh/sshd_config</span><br><span class="line">SUDOERS_FILE=/etc/sudoers</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 0. update package lists</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.1. reinstall sshd (workaround for initial version of WSL)</span></span><br><span class="line">sudo apt remove -y --purge openssh-server</span><br><span class="line">sudo apt install -y openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.2. install basic dependencies</span></span><br><span class="line">sudo apt install -y cmake gcc clang gdb valgrind build-essential</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.1. configure sshd</span></span><br><span class="line">sudo <span class="built_in">cp</span> <span class="variable">$SSHD_FILE</span> <span class="variable">$&#123;SSHD_FILE&#125;</span>.`<span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d_%H-%M-%S&#x27;</span>`.back</span><br><span class="line">sudo sed -i <span class="string">&#x27;/^Port/ d&#x27;</span> <span class="variable">$SSHD_FILE</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;/^ListenAddress/ d&#x27;</span> <span class="variable">$SSHD_FILE</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;/^UsePrivilegeSeparation/ d&#x27;</span> <span class="variable">$SSHD_FILE</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;/^PasswordAuthentication/ d&#x27;</span> <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# configured by CLion&quot;</span>      | sudo <span class="built_in">tee</span> -a <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ListenAddress <span class="variable">$&#123;SSHD_LISTEN_ADDRESS&#125;</span>&quot;</span>| sudo <span class="built_in">tee</span> -a <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Port <span class="variable">$&#123;SSHD_PORT&#125;</span>&quot;</span>          | sudo <span class="built_in">tee</span> -a <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;UsePrivilegeSeparation no&quot;</span>  | sudo <span class="built_in">tee</span> -a <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication yes&quot;</span> | sudo <span class="built_in">tee</span> -a <span class="variable">$SSHD_FILE</span></span><br><span class="line"><span class="comment"># 1.2. apply new settings</span></span><br><span class="line">sudo service ssh --full-restart</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2. autostart: run sshd </span></span><br><span class="line">sed -i <span class="string">&#x27;/^sudo service ssh --full-restart/ d&#x27;</span> ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;%sudo ALL=(ALL) NOPASSWD: /usr/sbin/service ssh --full-restart&quot;</span> | sudo <span class="built_in">tee</span> -a <span class="variable">$SUDOERS_FILE</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;EOF&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line">sshd_status=$(service ssh status)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$sshd_status</span> = *<span class="string">&quot;is not running&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">  sudo service ssh --full-restart</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">EOF</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># summary: SSHD config info</span></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SSH server parameters (<span class="variable">$SSHD_FILE</span>):&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ListenAddress <span class="variable">$&#123;SSHD_LISTEN_ADDRESS&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Port <span class="variable">$&#123;SSHD_PORT&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;UsePrivilegeSeparation no&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication yes&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在相对位置给<code>ubuntu_setup_env.sh</code>增加运行权限并运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x ubuntu_setup_env.sh</span><br><span class="line">bash ubuntu_setup_env.sh</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x ubuntu_setup_env.sh</span><br><span class="line">./ubuntu_setup_env.sh</span><br></pre></td></tr></table></figure><ol start="3"><li>重启Windows 10</li></ol><ul><li>这里我有一台机器遇到到了sudoers不能被执行的问题，害得我重装好几次，最后一次是装好ubuntu后修改了root密码，然后重启就连接上ssh了，也不知道是不是这样解决的。</li></ul><ol start="4"><li>在WSL环境内运行（端口号可根据<code>ubuntu_setup_env.sh</code>内设置进行调整）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@localhost -p2222</span><br></pre></td></tr></table></figure><p>username为第一步安装WSL时创建的用户名，注意<strong>替换</strong></p><h2 id="【第三步】配置Clion-内的-Toolchains"><a href="#【第三步】配置Clion-内的-Toolchains" class="headerlink" title="【第三步】配置Clion 内的 Toolchains"></a>【第三步】配置Clion 内的 Toolchains</h2><p>转到 <strong>Settings &#x2F; Preferences | Build, Execution, Deployment | Toolchains</strong>，从<strong>环境</strong>列表中选择<strong>WSL。</strong>CLion会自动检测已安装的发行版，或者手动设置路径。</p><h2 id="【第四步】配置Clion-内的-Terminal"><a href="#【第四步】配置Clion-内的-Terminal" class="headerlink" title="【第四步】配置Clion 内的 Terminal"></a>【第四步】配置Clion 内的 Terminal</h2><ul><li>转到 <strong>Settings | Tools | Terminal</strong> ，修改<code>application settings</code>内的<code>shell path</code>为：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Users\username\AppData\Local\Microsoft\WindowsApps\ubuntu.exe&quot;</span> run</span><br></pre></td></tr></table></figure><p>（注意将“username”<strong>替换</strong>为本机用户，“ubuntu.exe”会因为安装的版本有所差异）</p><h2 id="【第五步】配置Clion-内的-Coverage"><a href="#【第五步】配置Clion-内的-Coverage" class="headerlink" title="【第五步】配置Clion 内的 Coverage"></a>【第五步】配置Clion 内的 Coverage</h2><p>在运行<code>Run with Coverage</code>的时候提示<code>gcov tool is not found</code>，解决办法如下：</p><ul><li>转到 <strong>Settings | Build, Execution, Deployment | Coverage</strong> ，修改<code>Tools</code>内的<code>gcov</code>为（非Ubuntu根据情况修改）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\wsl$\Ubuntu\usr\bin\gcov</span><br></pre></td></tr></table></figure><h2 id="【第六步】配置Clion-内的-Valgrind"><a href="#【第六步】配置Clion-内的-Valgrind" class="headerlink" title="【第六步】配置Clion 内的 Valgrind"></a>【第六步】配置Clion 内的 Valgrind</h2><p>在运行<code>Run with Valgrind Memcheck</code>的时候提示<code>Valgrind executable is not found</code>，解决办法如下：</p><p>转到 <strong>Settings | Build, Execution, Deployment | Dynamic Analysis Tools | Valgrind</strong> ，修改<code>Valgrind executable</code>为（非Ubuntu根据情况修改）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\wsl$\Ubuntu\usr\bin\valgrind</span><br></pre></td></tr></table></figure><h2 id="【其他A】指定编译器"><a href="#【其他A】指定编译器" class="headerlink" title="【其他A】指定编译器"></a>【其他A】指定编译器</h2><p>转到<strong>Settings &#x2F; Preferences | Build, Execution, Deployment | Toolchains</strong>内<strong>新增</strong>或<strong>修改</strong><code>Toolchains</code>，调整<code>C Compiler</code>以及<code>C++ Compiler</code>，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/clang</span><br><span class="line">/usr/bin/clang++</span><br></pre></td></tr></table></figure><p>注：新增Toolchains的话，需要调整顺序进行切换</p><h2 id="【其他B】配置llvm-cov、llvm-profdata"><a href="#【其他B】配置llvm-cov、llvm-profdata" class="headerlink" title="【其他B】配置llvm-cov、llvm-profdata"></a>【其他B】配置llvm-cov、llvm-profdata</h2><ol><li>之前的配置内容没有包含llvm的安装，在WSL环境内安装LLVM：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install llvm</span><br></pre></td></tr></table></figure><ol start="2"><li>转到<strong>Settings | Build, Execution, Deployment | Coverage</strong>，调整<code>llvm-cov</code>、<code>llvm-profdata</code>配置内容（非Ubuntu根据情况修改）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\wsl$\Ubuntu\usr\bin\llvm-cov</span><br><span class="line">\\wsl$\Ubuntu\usr\bin\llvm-profdata</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
            <tag> Clion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
